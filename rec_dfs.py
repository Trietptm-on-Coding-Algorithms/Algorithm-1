#!/usr/bin/python
#-*- coding:utf-8 -*-
#深度优先搜索算法
#一直深入，直到进入死胡同，则回溯到上一个路由，选择另外一条
#当然这是理解思路，实现起来会换一种方式，使用递归调用来模仿一直深入
#直到没有路（子节点）可以选择，递归终止返回上一级，模仿回溯过程

#递归版深度优先搜索算法
def rec_dfs(G,s,S=None):
    if S is None:S=set()
    #S记录访问过的节点
    S.add(s)
    #添加根节点
    for u in G[s]:
        #迭代s邻居，但此时只会进行第一次循环，第一次循环中递归调用到下一级，该循环并没有完成
        if u in S:continue
        rec_dfs(G,u,S)
        #传入已访问过节点列表S，递归调用继续深入
        #如果没有字节点，则递归完成返回上一级，执行下一个循环，即递归另一个字节点

#迭代版深度优先搜索算法
def iter_dfs(G,s):
    S,Q=set(),[]
    #S为访问过的节点
    Q.append(s)
    while Q:
        u=Q.pop()
        #pop推出列表右边的元素，所以是后进先出，于是遍历一直深入
        #pop完一层字节点后，才轮到上一层节点，所以也与回溯过程相似
        if u in S:continue
        #如果访问过
        S.add(u)
        #添加到访问过的列表
        Q.extend(G[u])
        #Q添加u字节点
        yield u
